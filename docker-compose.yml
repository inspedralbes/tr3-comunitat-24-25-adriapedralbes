services:
  nextjs:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs-app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    command: pnpm dev
    depends_on:
      - django

  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django-app
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      # Configuraci√≥n de PostgreSQL
      - DATABASE_ENGINE=${DATABASE_ENGINE}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=${DATABASE_PORT}
    restart: on-failure
    depends_on:
      - postgres

  postgres:
    image: postgres:14-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    restart: on-failure

  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - postgres
    restart: on-failure

volumes:
  node_modules:
  postgres_data:
